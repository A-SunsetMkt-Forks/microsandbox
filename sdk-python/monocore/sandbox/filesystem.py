from types import TracebackType
from typing import Any, Callable, List, Optional

from typing_extensions import Self


class FileHandle:
    async def __aenter__(self) -> Self:
        return self

    async def __aexit__(
        self,
        exc_type: Optional[type[BaseException]],
        exc_val: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None: ...

    async def write(self, data: str | bytes) -> None: ...

    async def read(self) -> bytes: ...


class FileSystem:
    async def open(self, path: str, mode: str) -> FileHandle: ...

    async def exists(self, path: str) -> bool: ...

    async def remove(self, path: str) -> None: ...

    async def create(self, path: str) -> None: ...

    async def read(self, path: str) -> bytes: ...

    async def write(self, path: str, data: str | bytes) -> None: ...

    async def remove_dir(self, path: str, all: bool = False) -> None: ...

    async def create_dir(self, path: str, all: bool = False) -> None: ...

    async def read_dir(self, path: str) -> List[str]: ...

    async def list_dir(self, path: str) -> List[str]: ...

    def on_change(self, path: str, callback: Callable[[Any], None]) -> None: ...
